---
title: IIIF Image API 1.0
id: index
categories: [pages]
layout: spec
cssversion: ''
sitemap: false
---
<section class="wrapper">

<dl class="EditorsContributors">
  <dt>Editors</dt><dd></dd>
</dl>
<div style="margin-left: 40px;">
Stuart Snydman, Stanford
University<br />
Simeon Warner, Cornell University<br />
Robert Sanderson, Los Alamos National Laboratory
</div>
<dl class="EditorsContributors">
  <dt>Authors</dt><dd></dd>
</dl>
<div style="margin-left: 40px;">Ben
Albritton, Stanford University<br />
Peter James, British Library<br />
Neil Jefferies, Oxford University<br />
Christopher Jesudurai, Stanford University<br />
Sean Martin, British Library<br />
Roger Mathisen, National Library of Norway<br />
Petter R&oslash;nningsen, National Library of Norway<br />
</div>
<div class="abstract">
<h2 id="abstract">Abstract</h2>
<p>This document
describes an API proposed by the International
Image Interoperability Framework (IIIF) group for the delivery of
images via a standard http request. The IIIF API specifies a web
service that returns an image in response to a standard http or https
request. The URL can specify the region, size, rotation, quality
characteristics and format of the requested image. A URL can also be
constructed to request basic technical information about the image to
support client applications. &nbsp;The IIIF API was
conceived of to facilitate systematic reuse of image
resources in digital image repositories maintained by cultural
heritage organizations. The API could be adopted by any image
repository or service, and can be used to retrieve static images in
response to a properly constructed URL.</p>
<p>Please send feedback to <a href="mailto:iiif-discuss@googlegroups.com">iiif-discuss@googlegroups.com</a></p>
</div>
<hr />
<div class="toc">
<h2 id="contents">Table of Contents</h2>
<p class="toc">1. <a
 href="#audience">Audience</a><br />
2. <a href="#url_syntax">URL
Syntax</a><br />
&nbsp;&nbsp;&nbsp;&nbsp; 2.1 <a href="#image_syntax">Image Request URL
Syntax</a><br />
&nbsp;&nbsp;&nbsp;&nbsp; 2.2 <a href="#info_syntax">Image Information
Request URL
Syntax</a><br />
3. <a href="#identifier">Identifier</a><br />
4. <a href="#parameters">Parameters</a><br />
&nbsp;&nbsp;&nbsp;&nbsp; 4.1 <a href="#region">Region</a><br />
&nbsp;&nbsp;&nbsp;&nbsp; 4.2 <a href="#size">Size</a><br />
&nbsp;&nbsp;&nbsp;&nbsp; 4.3 <a href="#rotation">Rotation</a><br />
&nbsp;&nbsp;&nbsp;&nbsp; 4.4 <a href="#quality">Quality</a><br />
&nbsp;&nbsp;&nbsp;&nbsp; 4.5 <a href="#format">Format</a><br />
&nbsp;&nbsp;&nbsp;&nbsp; 4.6 <a href="#order">Order of Implementation</a><br />
5. <a href="#info">Image
Information</a><br />
6. <a href="#server_response">Server
Responses</a><br />
&nbsp;&nbsp;&nbsp;&nbsp; 6.1 <a href="#success">Successful Responses</a><br />
&nbsp;&nbsp;&nbsp;&nbsp; 6.2 <a href="#error">Error Conditions</a><br />
7. <a href="#authentication">Authentication</a><br />
8. <a href="#compliance">Compliance
Levels</a><br />
9. <a href="#url_encoding">URL
Encoding and Decoding</a><br />
10. <a href="#security">Security
Considerations</a><br />
</p>
<h3>Appendices</h3>
<p class="toc">
A. <a href="#implementation">Implementation Notes</a>
<br />
B. <a href="#acknowledgments">Acknowledgements</a>
<br />
C. <a href="#changelog">Change
Log</a><br />
</p>
</div>
<hr />


<div class="body">
<h2 id="audience">1. Audience</h2>
<p>This document is
intended for developers building applications that
share digital image assets. This includes:</p>
<ul>
  <li>Developers building digital
image repositories who would like to
offer services for easily sharing digital images with other
repositories, web applications, or other software that uses images from
the web.</li>
  <li>Developers building web
applications or software that want to
retrieve images from compliant repositories.</li>
  <li>A specifically targeted
audience are developers and managers of
digital image repositories, web applications and image tools at
cultural heritage institutions, like museums, libraries and archives.</li>
</ul>
<h2><a id="url_syntax">2. URL Syntax</a></h2>
<p>The IIIF
Image API can be called in two forms: one to request an image, and a
second to request techincal information about the image.
Both forms convey the request's
information in the path segment
of the URI, rather than as query parameters. This makes responses
more easily able to be cached, either at the server or by standard
web-caching infrastructure. It also permits a minimal implementation
using pre-computed files in a matching directory structure. </p>
<p>
To allow for extension, this specification does not define the
behaviour of an implementing server when it receives requests that do
not match one of the two request syntaxes below.
</p>
<h3><a id="image_syntax">2.1
Image Request
URL Syntax</a></h3>
The IIIF
Image API URL for requesting an image MUST conform to the following
format:

<div class="code-block" style="margin-left: 40px;">http[s]://server/[prefix/]identifier/region/size/rotation/quality[.format]
</div>
<p>where []
delimits components which are optional.</p>
<p>The URI Template (<a href="https://datatracker.ietf.org/doc/html/rfc6750">RFC6750</a>)
form is:
</p>
<div class="code-block" style="margin-left: 40px;">http://{server}{/prefix}/{identifier}/{region}/{size}/{rotation}/{quality}{.format}
</div>
<p>For example:</p>
<div class="code-block" style="margin-left: 40px;">http://www.example.org/image-service/abcd1234/full/full/0/native.jpg
</div>
<p>The
sections of the Image Request URL include:</p>
<table class="api-table">
  <tbody>
    <tr>
      <th>Syntax</th><th>Description</th>
    </tr>
    <tr>
      <td style="width: 113px;">http
(or https)</td>
      <td style="width: 1202px;">Indicates
the use of the http or https
protocol in calling the service.</td>
    </tr>
    <tr>
      <td style="width: 113px;">server</td>
      <td style="width: 1202px;">The
host server on which the
IIIF-compliant image service resides.</td>
    </tr>
    <tr>
      <td style="width: 113px;">prefix</td>
      <td style="width: 1202px;">The
path on the host server to the
IIIF-compliant image service.&nbsp;This prefix is optional, but may
be
useful when the host server
supports multiple services. (note: The prefix MAY contain slashes or
constructions that resemble service parameters.)</td>
    </tr>
    <tr>
      <td style="width: 113px;">identifier</td>
      <td style="width: 1202px;">The
unique identifier of the requested
image, expressed as a string.&nbsp;This may be an ark, URN,
filename,
or other unique identifier. Special characters MUST be URI encoded.</td>
    </tr>
    <tr>
      <td style="width: 113px;">region,
size, rotation, quality, format</td>
      <td style="width: 1202px;">Parameters
defining the
characteristics of the returned image.&nbsp;These are described in
detail below.</td>
    </tr>
  </tbody>
</table>
<p>
See <a href="#parameters">Section
4 - Image Request Parameters</a>.
</p>
<h3><a id="info_syntax">2.2
Image Information Request
URL Syntax</a></h3>
The
IIIF Image API URL for requesting image information MUST conform to the
following format:

<div class="code-block" style="margin-left: 40px;">http[s]://server/[prefix/]identifier/info.ext</div>
<p>where [
]
delimits the optional prefix component, "info" is a literal string, and
ext is one of "json" or "xml".</p>
<p>The URI Template (<a href="https://datatracker.ietf.org/doc/html/rfc6750">RFC6750</a>)
form is:
</p>
<div class="code-block" style="margin-left: 40px;">http://{server}{/prefix}/{identifier}/info.{ext}
</div>
<p>For example:</p>
<div class="code-block" style="margin-left: 40px;">http://www.example.org/image-service/abcd1234/info.json
</div>
<p>
See <a href="#info">Section
5 - Image Information Request</a>
for more information.
</p>

<h2><a id="identifier">3. Identifier</a></h2>
<p>The API
places no restrictions on the form of the identifiers
that a server
may use or support, although the identifier MUST be expressed as a
string. All special characters (e.g. ? or #) MUST be URI encoded to
avoid unpredictable client behaviors. The URL syntax relies upon slash
(/) separators so any slashes in the identifier MUST be URI encoded
(aka. percent-encoded, replace / with %2F ). See discussion in <a
 href="#url_encoding">
Section
9 - URL
Encoding and Decoding. </a></p>


<h2><a id="parameters">4. Image
Request Parameters</a></h2>
<p>All
parameters described below are required for compliant
construction of a IIIF image API URL. The sequence of parameters in the
URL MUST be in the order described below. The order of the parameters
is also intended as the order of the operations by which the service
should manipulate the image content. Thus, the image content is first
extracted as a region of the source image, then scaled to the requested
size, rotated and transformed into the color depth and format. This
resulting image content is returned as the representation for the URL.
All transformations are performed within the bounds of integer
arithmatic. &nbsp;The rounding method is not specified. &nbsp;Floating
point
numbers should be have at most 10 decimal digits and
consist only of decimal digits and &ldquo;.&rdquo; with a
leading zero
if less than 1.</p>


<h3><a id="region">4.1 Region</a></h3>
<p>The region parameter
defines the rectangular portion of the source
image to be returned. Region can be specified by pixel coordinates,
percentage or by the value &ldquo;full&rdquo;, which specifies
that the
entire region of the source image should be returned.</p>
<table class="api-table">
  <tbody>
    <tr>
      <th>Form of Region Parameter</th>
      <th>Description</th>
    </tr>
    <tr>
      <td>full</td>
      <td>The
complete image is returned, without any cropping.</td>
    </tr>
    <tr>
      <td style="width: 113px;">x,y,w,h</td>
      <td style="width: 1202px;">The
region of the source image to be
returned is defined in terms of
absolute pixel values. The value of x represents the number of
pixels from the 0 position on the horizontal axis. The value of y
represents the
number of pixels from the 0 position on the vertical axis. Thus the x,y
position 0,0 is the upper left-most pixel of the image. w represents
the width of the region and h represents the height of the region in
pixels.</td>
    </tr>
    <tr>
      <td style="width: 113px;">pct:x,y,w,h</td>
      <td style="width: 1202px;">The
region to be returned is specified
as a sequence of percentages of
the source image&rsquo;s dimensions. Thus, x represents the number
of
pixels
from the 0 position on the horizontal axis, calculated as a percentage
of the source image&rsquo;s width. w represents the width of the
region
calculated as a percentage of the <span style="font-style: italic;">source
image&rsquo;s
width</span>. The same
applies to y and h respectively. These may be floating point numbers
(see <a href="#info">Section
5 - Image Information Request</a>).</td>
    </tr>
  </tbody>
</table>

<span style="font-weight: bold;"><br />
</span>If the request specifies a
region which extends beyond the dimensions of the source image, then
the service should return an
image cropped at the boundary of the source image. <br />
<br />
If the requested region's height or width is zero, or if the region is
entirely outside the bounds of the source image, then the server MUST
return a 400 (bad request) status code. <br />
<br />
<span style="font-weight: bold;">Examples:<br />
<br />
</span>http://www.example.org/image-service/abcd1234/<span
 style="color: red;">80,15,60,75</span>/full/0/native.jpg<br />
http://www.example.org/image-service/abcd1234/<span style="color: red;">pct:10,10,80,70</span>/full/0/native.jpg<br />
http://www.example.org/image-service/abcd1234/<span style="color: red;">full</span>/full/0/native.jpg
<h3><img style="width: 875px; height: 600px;"
 alt="Illustrated examples of the region parameter"
 src="images/iiif-region.png" />&nbsp;&nbsp;
</h3>


<h3><a id="size">4.2 Size</a></h3>
The size parameter determines the dimensions to which the extracted
region is to be scaled. <br />
&nbsp;<br />
<table class="api-table">
  <tbody>
    <tr>
      <th>Form of Size Parameter</th>
      <th>Description</th>
    </tr>
    <tr>
      <td>full</td>
      <td>The extracted region is
not scaled, and is returned at its full size.</td>
    </tr>
    <tr>
      <td>w,</td>
      <td>The extracted region
should be scaled so that its width is exactly equal to w,
and the height will be a calculated value that maintains the aspect
ratio of the requested region.</td>
    </tr>
    <tr>
      <td>,h</td>
      <td>The extracted region
should be scaled so that its height is exactly equal to h,
and the width will be a calculated value that maintains the aspect
ratio of the&nbsp;requested region. </td>
    </tr>
    <tr>
      <td>pct:n</td>
      <td>The width and height of
the returned image is scaled to n% of
the width and height of the extracted region. The aspect ratio of the
returned image is the same as that of the extracted region. </td>
    </tr>
    <tr>
      <td>w,h</td>
      <td>The width and height of
the returned image are exactly w and
h. The aspect ratio of the returned image MAY be different than
the extracted region, resulting in a distorted image. </td>
    </tr>
    <tr>
      <td>!w,h</td>
      <td>The image content is
scaled for the best fit such that the
resulting width and height are less than or equal to the requested
width and height. The exact scaling MAY be determined by the service
provider, based on characteristics including image quality and system
performance. The dimensions of the returned image content are
calculated to maintain the aspect ratio of the extracted
region. </td>
    </tr>
  </tbody>
</table>
<br />
If the resulting height or width is zero, then the server MUST return a
400 (bad request) status code. <br />
<br />
The image server MAY support scaling beyond the full size of the
extracted region.<br />
<br />
<span style="font-weight: bold;">Examples</span>:<br />
<br />
http://www.example.org/image-service/abcd1234/full/<span
 style="color: rgb(255, 0, 0);">full</span>/0/native.jpg<br />
http://www.example.org/image-service/abcd1234/full/<span
 style="color: red;">100,</span>/0/native.jpg<br />
http://www.example.org/image-service/abcd1234/full/<span
 style="color: red;">,100</span>/0/native.jpg<br />
http://www.example.org/image-service/abcd1234/full/<span
 style="color: red;">pct:50</span>/0/native.jpg<br />
http://www.example.org/image-service/abcd1234/full/<span
 style="color: red;">150,75</span>/0/native.jpg<br />
http://www.example.org/image-service/abcd1234/full/<span
 style="color: red;">!150,75</span>/0/native.jpg<br />
<h3><img style="width: 750px; height: 450px;"
 alt="Illustrated examples of the size parameter" src="images/iiif-size.png"></h3>


<h3><a id="rotation">4.3 Rotation</a></h3>
<p>The rotation
value represents the number of degrees of clockwise
rotation from the original, and may be any floating point number from 0
to 360. Initially most services will only support 0, 90, 180 or 270 as
valid values.</p>
<p><strong>Examples:</strong></p>
<ul>
</ul>
http://www.example.org/image-service/abcd1234/full/full/<span
 style="color: red;">0</span>/native.jpg<br />
http://www.example.org/image-service/abcd1234/full/full/<span
 style="color: red;">90</span>/native.jpg<br />
http://www.example.org/image-service/abcd1234/full/full/<span
 style="color: red;">180</span>/native.jpg<br />
http://www.example.org/image-service/abcd1234/full/full/<span
 style="color: red;">270</span>/native.jpg<br />
http://www.example.org/image-service/abcd1234/full/full/<span
 style="color: rgb(255, 0, 0);">22.5</span>/native.jpg
<ul>
</ul>
<h3><img style="width: 685px; height: 325px;"
 alt="Illustrated examples of the rotation parameter"
 src="images/iiif-rotation.png" /></h3>
In
most cases a rotation will change the
width and height dimensions of the returned image file. &nbsp;The
service SHOULD return an image file that contains all of the image
contents requested in the <span style="font-style: italic;">region</span>
and <span style="font-style: italic;">size
</span>parameters, even if the
dimensions of the returned image file are different than specified in
the size parameter.&nbsp; The image contents SHOULD NOT be
scaled&nbsp; as a result of the rotation, and there SHOULD be no
additional space between the corners of the rotated image contents and
the bounding box of the returned image file.<br />
<br />
For non-90-degree rotations the API does not specify the background
color. &nbsp;<br />
<h3><a id="quality">4.4 Quality</a></h3>
<p>The quality parameter
determines the bit-depth of the delivered image. The quality value
of native requests an image of the same bit-depth as the source image.
Values other than native are requested transformations of the bit-depth
of the source image.&nbsp;</p>
<table class="api-table">
  <tbody>
    <tr>
      <th>Quality Parameter</th>
      <th>Returned</th>
    </tr>
    <tr>
      <td>native</td>
      <td>The image is returned at
an unspecified bit-depth.</td>
    </tr>
    <tr>
      <td>color</td>
      <td>The image is returned in
24-bit color.</td>
    </tr>
    <tr>
      <td>grey</td>
      <td>The image is returned in
8-bit greyscale</td>
    </tr>
    <tr>
      <td>bitonal</td>
      <td>The image is returned in
1-bit bitonal</td>
    </tr>
  </tbody>
</table>
<br />
<p><strong>Examples:</strong><br />
</p>
http://www.example.org/image-service/abcd1234/full/600,/0/<span
 style="color: rgb(255, 0, 0);">native</span>.jpg
<br />
http://www.example.org/image-service/abcd1234/full/600,/0/<span
 style="color: rgb(255, 0, 0);">color</span>.jpg
<br />
http://www.example.org/image-service/abcd1234/full/600,/0/<span
 style="color: red;">grey</span>.jpg
<br />
http://www.example.org/image-service/abcd1234/full/600,/0/<span
 style="color: red;">bitonal</span>.jpg<br />
<br />
&nbsp;<img style="width: 825px; height: 275px;"
 alt="Illustrated examples of the quality parameter"
 title="Illustrated examples of the quality parameter"
 src="images/iiif-quality.png" />
<h3><a id="format">4.5
Format</a></h3>
<p>The format of the
returned image is optionally expressed as an
extension at the end of the URL.</p>
<table class="api-table">
  <tbody>
    <tr>
      <th>Extension</th>
      <th>Mimetype</th>
    </tr>
    <tr>
      <td>jpg</td>
      <td>image/jpeg</td>
    </tr>
    <tr>
      <td>tif</td>
      <td>image/tiff</td>
    </tr>
    <tr>
      <td>png</td>
      <td>image/png</td>
    </tr>
    <tr>
      <td>gif</td>
      <td>image/gif</td>
    </tr>
    <tr>
      <td>jp2</td>
      <td>image/jp2</td>
    </tr>
    <tr>
      <td>pdf</td>
      <td>application/pdf</td>
    </tr>
  </tbody>
</table>
<br />
<p><strong>Examples:</strong><br />
</p>
http://www.example.org/image-service/abcd1234/full/600,/0/native.<span
 style="color: red;">jpg</span>
<br />
http://www.example.org/image-service/abcd1234/full/600,/0/native.<span
 style="color: red;">png</span>
<br />
http://www.example.org/image-service/abcd1234/full/600,/0/native.<span
 style="color: red;">tif</span>
<p><br />
If the format is not specified
in the URI, then the server SHOULD
use the HTTP Accept header to determine the client&rsquo;s
preferences
for the format. The server may either do 200 (return the representation
in the response) or 30x (redirect to the correct URI with a format
extension) style content negotiation. If neither are given, then the
server should use a default format of its own choosing.<br />
</p>
<ul>
</ul>



<h3><a id="order">4.6 Order of
Implementation</a></h3>
<p>The sequence of
parameters in the URL is intended to express the
order in which image manipulations are made against the original. This
is important to consider when implementing the service because applying
the same parameters in a different sequence will often result in a
different image being delivered. The order is critical so that the
application calling the service reliably receives the output it expects.</p>
<p>The parameters should
be interpreted as if the the sequence of image
manipulations were:</p>
<p style="margin-left: 80px;" class="code-block">Region THEN
Size THEN
Rotation THEN Quality THEN Format</p>
<br/><br/>
<img style="width: 800px; height: 325px;"
 alt="Illustrated example of order of implementation"
 src="images/iiif-order.png" /><br />


<h2><a id="info">5. Image Information
Request</a></h2>
<p>The service MUST return
technical information about the requested image in JSON and XML
formats. &nbsp;The request &nbsp;for technical information MUST
conform to the format:</p>
<p class="code-block" style="margin-left: 40px;">http[s]://server/[prefix/]identifier/info.xml</p>
<p style="margin-left: 40px;">&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; or</p>
<p class="code-block" style="margin-left: 40px;">http[s]://server/[prefix/]identifier/info.json&nbsp;</p>
<p>All IIIF compliant services
must support both the XML and JSON response. &nbsp;</p>
<p>The response will return the
following information</p>
<table class="api-table">
  <tbody>
    <tr>
      <th>Element</th>
      <th>Required?</th>
      <th>Description</th>
    </tr>
    <tr>
      <td>identifier<br />
      </td>
      <td>Required</td>
      <td>The
unique identifier of the source
image, expressed as a string. The identifier MUST be supplied without
URI encoding.<br />
      </td>
    </tr>
    <tr>
      <td>width</td>
      <td>Required</td>
      <td>The width of the source
image.</td>
    </tr>
    <tr>
      <td>height</td>
      <td>Required</td>
      <td>The height of the source
image.</td>
    </tr>
    <tr>
      <td>scale_factors</td>
      <td>Optional</td>
      <td>Some image servers
support the creation of multiple resolution levels for a single image
in order to optimize the efficiency in delivering images of different
sizes. The scale_factors element expresses a list of resolution scaling
factors. </td>
    </tr>
    <tr>
      <td>tile_width</td>
      <td>Optional</td>
      <td>Some image servers
support the use of predefined tiles&nbsp;to efficiently deliver
assembled images. &nbsp;The tile_width element expresses the width
of the predefined tiles.</td>
    </tr>
    <tr>
      <td>tile_height</td>
      <td>Optional</td>
      <td>The tile_height element
expresses the height of the predefined tiles.</td>
    </tr>
    <tr>
      <td>formats</td>
      <td>Optional</td>
      <td>The list of image
format parameter values available for the image.</td>
    </tr>
    <tr>
      <td>qualities</td>
      <td>Optional</td>
      <td>The list of image
quality parameter values available for the image. </td>
    </tr>
    <tr>
      <td>profile</td>
      <td>Optional</td>
      <td>URI indicating the
compliance level supported. Values as described in&nbsp;<a
 href="#compliance">Section 8. Compliance Levels</a></td>
    </tr>
  </tbody>
</table>

<p>The XML response should conform
to the format shown in the following example. <a href="xml/image-api.xsd">W3C
XML</a>
and <a href="xml/image-api.rng">Relax-NG</a>
schemas are available for
validation.</p>

<div class="code-block" style="margin-left: 40px;"><code>&lt;?xml
version="1.0" encoding="UTF-8"?&gt;<br />
&lt;info
xmlns="http://library.stanford.edu/iiif/image-api/ns/"&gt;<br />
&nbsp;
&lt;identifier&gt;1E34750D-38DB-4825-A38A-B60A345E591C&lt;/identifier&gt;<br />
&nbsp; &lt;width&gt;6000&lt;/width&gt;<br />
&nbsp; &lt;height&gt;4000&lt;/height&gt;<br />
&nbsp; &lt;scale_factors&gt;<br />
&nbsp;&nbsp;&nbsp;
&lt;scale_factor&gt;1&lt;/scale_factor&gt;<br />
&nbsp;&nbsp;&nbsp;
&lt;scale_factor&gt;2&lt;/scale_factor&gt;<br />
&nbsp;&nbsp;&nbsp;
&lt;scale_factor&gt;4&lt;/scale_factor&gt;<br />
&nbsp; &lt;/scale_factors&gt;<br />
&nbsp; &lt;tile_width&gt;1024&lt;/tile_width&gt;<br />
&nbsp; &lt;tile_height&gt;1024&lt;/tile_height&gt;<br />
&nbsp; &lt;formats&gt;<br />
&nbsp;&nbsp;&nbsp;
&lt;format&gt;jpg&lt;/format&gt;<br />
&nbsp;&nbsp;&nbsp;
&lt;format&gt;png&lt;/format&gt;<br />
&nbsp; &lt;/formats&gt;<br />
&nbsp; &lt;qualities&gt;<br />
&nbsp;&nbsp;&nbsp;
&lt;quality&gt;native&lt;/quality&gt;<br />
&nbsp;&nbsp;&nbsp;
&lt;quality&gt;grey&lt;/quality&gt;<br />
&nbsp; &lt;/qualities&gt;<br />
&nbsp;
&lt;profile&gt;http://library.stanford.edu/iiif/image-api/compliance.html#level1&lt;/profile&gt;&nbsp;<br />
&lt;/info&gt;<br />
<br />
</code></div>
<p> The JSON response should
conform to the format shown in the following example:</p>
<p class="code-block" style="margin-left: 40px;"><code>{<br />
&nbsp; "identifier" : "</code><code>1E34750D-38DB-4825-A38A-B60A345E591C</code><code>",<br />
&nbsp; "width" : 6000,<br />
&nbsp; "height" : 4000,<br />
&nbsp; "scale_factors" : [ 1, 2, 4 ],<br />
&nbsp; "tile_width" : 1024,<br />
&nbsp; "tile_height" : 1024,<br />
&nbsp; "formats" : [ "jpg", "png" ],<br />
&nbsp; "qualities" : [ "native", "grey" ],<br />
&nbsp; "profile" :
"http://library.stanford.edu/iiif/image-api/compliance.html#level0"&nbsp;<br />
}&nbsp;</code></p>



<h2><a id="server_response">6.
Server Responses</a></h2>
<h3><a id="success">6.1 Successful
Responses</a></h3>
<p>Servers may transmit HTTP
responses with status codes 200, 302 and 304 when the request has been
successfully processed.&nbsp; If the status code is 200, then the
entity-body MUST be the requested image or information
response.&nbsp; If the status code is 302 or 304, then the
entity-body is unrestricted, but it is RECOMMENDED to be
empty.&nbsp; If the status code is 302, then the Location HTTP
Header MUST be set containing the URL of the image that fulfills the
request.&nbsp; This enables servers to have a single canonical URL
to promote caching of responses.&nbsp; Status code 304 is handled
exactly as per the HTTP specification. Clients should therefore expect
to encounter all of these situations and not assume that the
entity-body of the initial response necessarily contains the image data.</p>
<h3><a id="error">6.2 Error
Conditions</a></h3>
<p>The order in which
servers parse requests and detect errors is not
specified. A request will fail on the first error encountered and
return an appropriate code with more detail in the response document.
Errors are reported at the parameter level only with an option for more
detailed text.</p>
<p>Errors should be
reported in a standard HTTP response code in the
HTTP header as follows:</p>
<table class="api-table">
  <tbody>
    <tr>
      <th>Error
Code</th>
      <th>Description</th>
    </tr>
    <tr>
      <td>400 Bad Request</td>
      <td>This response is used
when it is impossible for the server to fulfil
the request, for example if the combination of parameters would result
in a zero-sized image. In the case of a malformed URL it may not be
possible to identify a failed parameter. </td>
    </tr>
    <tr>
      <td>401 Unauthorized</td>
      <td>Authentication is
required and not provided. See Section 7 below for details.</td>
    </tr>
    <tr>
      <td>403 Forbidden</td>
      <td>The user, authenticated
or not, is not permitted to perform the requested operation.</td>
    </tr>
    <tr>
      <td>404 Not Found</td>
      <td>The image resource
specified by [identifier] does not exist</td>
    </tr>
    <tr>
      <td>414 URI Too Long</td>
      <td>As the specification
does not support query parameters there
should not be a post-amble beyond the image format specifier. However,
there may be an embedded escaped URL identifier. Limit requests to 1024
characters. </td>
    </tr>
    <tr>
      <td>415 Invalid Media</td>
      <td>Format not available
(implies failure of the format specifier)</td>
    </tr>
    <tr>
      <td>500 Internal Server Error</td>
      <td>The server encountered
an unexpected error that prevented
it from fulfilling the request. </td>
    </tr>
    <tr>
      <td>501 Not Implemented</td>
      <td>A valid IIIF request
that is not implemented by this server. If the requested format is not
implemented then a 415 error should be used. </td>
    </tr>
    <tr>
      <td>503 Service unavailable</td>
      <td>Used when the server is
busy/temporarily unavailable due to
load/maintenance issues. An alternative to connection refusal with the
option to specify a back-off period. </td>
    </tr>
  </tbody>
</table>
<br />

<p>The body of the
response for all error conditions should contain an
XML fragment with the parameter and optional human readable text as
follows. The Content-Type must be &ldquo;text/xml&rdquo;.</p>
<p class="code-block" ><code>&lt;?xml
version="1.0"
encoding="UTF-8" ?&gt;<br />
&lt;error&nbsp;</code><code>xmlns="http://library.stanford.edu/iiif/image-api/ns/"</code><code>&gt;<br />
&nbsp;&nbsp;&lt;parameter&gt;size&lt;/parameter&gt;<br />
&nbsp;&nbsp;&lt;text&gt;Invalid size
specified&lt;/text&gt;<br />
&lt;/error&gt;</code></p>
<p>The text element is
optional and
can explain the failure on more detail - for
example to distinguish not implemented vs out-of-bounds in the case of
a 403.</p>
<h2><a id="authentication">7.
Authentication</a></h2>
This API does not specify whether the image server will support
authentication or what mechanism it might use. In the case of
&nbsp;"401 Unauthorized" HTTP error response, the content of the
WWW-Authenticate header will depend on the
authentication mechanism supported by the server. If the server
supports HTTP Basic or Digest authentication then the header should
follow <a href="http://www.ietf.org/rfc/rfc2617">RFC2617</a>,
for example:<br />
<br />
<div class="code-block" style="margin-left: 40px;">WWW-Authenticate:
Basic realm="Images"<br />
</div>
<br /><br />
If the server supports cookie-based authentication then the response
should include the location of the page that will allow the user to
login:<br />
<br />
<div class="code-block" style="margin-left: 40px;">WWW-Authenticate:
Cookie location="https://example.com/login&amp;redirect={URI}"<br />
</div>
<br /><br />
Where {URI} is a template parameter that SHOULD be used if the login
server supports redirection after login. A client MUST substitute the
current page URI in place of {URI} before presenting a login link to
the user. Note that while there is widespread agreement that the
limitation of WWW-Authenticate to Basic and Digest authentication in
the current HTTP specification, there is no standard way to indicate
appropriate redirection to a login screen, or convey a URI template to
insert a return URI.
<h2><a id="compliance">8.
Compliance
Levels</a></h2>
<p>A service
SHOULD specify
on all responses the extent to which the API is supported. This is
done by including an HTTP Link header
(<a href="https://datatracker.ietf.org/doc/html/rfc5988">RFC5988</a>)
entry pointing to the
description of the highest level of conformance of which ALL of the
requirements are met. The &ldquo;rel&rdquo; type to be used is
&ldquo;profile&rdquo;, and thus a complete header might look
like:</p>
<p class="code-block">Link:
&lt;http://library.stanford.edu/iiif/image-api/compliance.html#level0&gt;;rel="profile"</p>
<p>An image server MAY declare
different compliance levels for different images. If the compliance
level is not indicated, then a client should assume level 0 compliance
only. For detailed
compliance definitions see
<a href="http://library.stanford.edu/iiif/image-api/compliance.html">http://library.stanford.edu/iiif/image-api/compliance.html</a>.&nbsp;</p>
<p>The compliance profile URI
given in the Link header (between &lt; and &gt;) may also be
returned in the profile element of responses to Image Information
Requests.
</p>
<h2><a id="url_encoding" >9. URL
Encoding and
Decoding</a></h2>
<p>The URL
syntax of this API relies upon slash (/) separators
which
MUST NOT be encoded. Clients MUST percent-encode special characters
(the to-encode set below: percent
and gen-delims of <a href="http://www.ietf.org/rfc/rfc3986">RFC3986</a>
except the
colon) within the components of requests. For example, any slashes
within the identifier part of the URL MUST be percent-encoded. Encoding
is necessary only for the identifier because other components will not
include special characters.</p>
<p class="code-block">to-encode
= "/" / "?" / "#" / "[" / "]" / "@" / "%"</p>
<p>Upon
receiving an API request, a server MUST first split the URL
path on slashes and then decode any percent-encoded characters in each
component.</p>
<p>Additionally,
if identifiers include any characters
outside the US-ASCII set then the encoding to octets must be defined
consistently on client and server, and the octets MUST be
percent-encoded. Percent-encoding other characters introduces no
ambiguity but is unnecessary.</p>
<table class="api-table">
  <tbody>
    <tr>
      <th>Parameters</th>
      <th>URL path (without
leading http:server/[prefix/])</th>
    </tr>
    <tr>
      <td>identifier=id1
region=full size=full rotation=0 quality=native </td>
      <td>id1/full/full/0/native</td>
    </tr>
    <tr>
      <td>identifier=id1
region=0,10,100,200 size=pct:50 rotation=90 quality=native format=png </td>
      <td>id1/0,10,100,200/pct:50/90/native.png</td>
    </tr>
    <tr>
      <td>identifier=id1
region=pct:10,10,80,80 size=50, rotation=22.5 quality=color format=jpg </td>
      <td>id1/pct:10,10,80,80/50,/22.5/color.jpg</td>
    </tr>
    <tr>
      <td>identifier=bb157hs6068
region=full size=full rotation=270 quality=grey format=jpg </td>
      <td>bb157hs6068/full/full/270/grey.jpg</td>
    </tr>
    <tr>
      <td>identifier=ark:/12025/654xz321
region=full size=full rotation=0 quality=native </td>
      <td>ark:%2F12025%2F654xz321/full/full/0/native</td>
    </tr>
    <tr>
      <td>identifier=urn:foo:a123,456
region=full size=full rotation=0 quality=native </td>
      <td>urn:foo:a123,456/full/full/0/native</td>
    </tr>
    <tr>
      <td>identifier=urn:sici:1046-8188(199501)13:1%3C69:FTTHBI%3E2.0.TX;2-4
region=full size=full rotation=0 quality=native </td>
      <td>urn:sici:1046-8188(199501)13:1%253C69:FTTHBI%253E2.0.TX;2-4/full/full/0/native</td>
    </tr>
    <tr>
      <td>identifier=http://example.com/?54#a
region=full size=full rotation=0 quality=native </td>
      <td>http:%2F%2Fexample.com%2F%3F54%23a/full/full/0/native</td>
    </tr>
    <tr>
      <td>identifier=id1 image
information request, format=json </td>
      <td>id1/info.json</td>
    </tr>
    <tr>
      <td>identifier=id1 image
information request, format=xml </td>
      <td>id1/info.xml</td>
    </tr>
  </tbody>
</table>
<br />
Servers which are incapable of processing arbitrarily encoded
identifiers SHOULD make their best efforts to expose only image
identifiers for which typical clients will not encode any of the
characters, and thus it is RECOMMENDED to limit characters in
identifiers to letters, numbers and the underscore character.<br />
<h2><a id="security">10.
Security
Considerations</a></h2>
<p>This API defines
a URI syntax and the semantics associated with its
components. The composition of URIs has few security considerations
except possible exposure of sensitive information in URIs or revealing
of browse/view behavior of users. </p>
<p>Server
applications implementing this API must consider possible
denial-of-service attacks, and authentication vulnerabilities based on
DNS spoofing. Applications must be careful to parse incoming requests
(URIs) in ways that avoid overflow or injection attacks.</p>
<p>Early sanity
checking of URI&rsquo;s (lengths, trailing GET, invalid
characters, out-of-range parameters) and rejection with appropriate
response codes is recommended.</p>
<div class="body">
<h2><a id="implementation">A.
Implementation Notes</a></h2>
<ol>
  <li>For
use cases that
enable the
saving of the image, it is RECOMMENDED to use the HTTP
Content-Disposition header (<a
 href="https://datatracker.ietf.org/doc/html/rfc6266">RFC6266</a>)
to provide a convenient filename
that distinguishes the image, based on the identifier and parameters
provided.</li>
  <li>This
specification makes no assertion about the rights status of requested
images or metadata, whether or not authentication has been
accomplished. &nbsp;Please see the IIIF Metadata API for rights
information. &nbsp;</li>
  <li>This
API does not specify how image servers fulfill requests, what quality
the returned images will have for different parameters, or how
parameters may affect performance. See the compliance document for more
discussion.</li>
  <li>Image identifiers that
include the slash (/ %2F) or backslash (\ %5C) characters may cause
problems with some HTTP servers. Apache servers from version 2.2.18
support the "AllowEncodedSlashes NoDecode" (link to <a
 href="http://httpd.apache.org/docs/2.2/en/mod/core.html#allowencodedslashes">http://httpd.apache.org/docs/2.2/en/mod/core.html#allowencodedslashes</a>)
configuration directive which will correctly pass these characters to
client applications without rejecting or decoding them. Servers using
older versions of Apache and local identifiers which include these
characters will need to use a workaround such as internally translating
or escaping slash and backslash to safe value (perhaps by double
URL-encoding them).</li>
  <li>As described in <a href="#rotation">Section 4.2
(Rotation)</a>, in order to retain
the size of the requested image
contents,&nbsp;rotation will change the
width and height dimensions of the returned image file. A formula
for&nbsp;calculating
the dimensions of the returned image file for a given rotation can be
found <a href="rotation_calc/">here</a>.</li>
</ol>
<h2><a id="acknowledgments">B.
Acknowledgments</a></h2>
The production of this
document
was generously supported by a grant from the <a
 href="http://www.mellon.org/">
Andrew W. Mellon
Foundation. </a>&nbsp;<br />
<br />
The full IIIF Working Group deserves&nbsp;thanks and
recognition&nbsp;for their
continuous engagement, innovative ideas and
feedback. Members of the group not listed as authors or editors above
include Aquiles Alencar Brayner, Richard Boulderstone, Svein Arne
Brygfjeld, Tom Cramer, Markus Enders, Renhart Gittens, David Golding,
Tim Gollins, Peter James, Dean Krafft, Matt McGrattan, Stephane
Pillorget, Johan van der Knijff, Romain Vassilieff, and William Ying.
&nbsp; <br />
<br />
The inspiration, use cases and initial
outline for this API originated from the work of the Digital Medieval
Manuscript Interoperabiltiy Technical
Council.
&nbsp;<br />
<br />
Attendees of the third annual LibDevConX workshop&nbsp;gave an
early
draft of this API a thoughtful hearing and provided essential feedback
to ensure that the API fit with diverse use cases and technical
environments. &nbsp;<br />
<br />
Many thanks to Matthieu Bonicel, Kevin Clarke, Mark Patton, Lynn McRae,
Willy Mene, Brian Tingle, Ian Davis and Scotty Logan for your
thoughtful
contributions to the effort and written feedback. <br />
<ul>
</ul>
</div>
</div>

<div class="changelog">
<h2><a id="changelog">C. Change Log</a></h2>
<table class="api-table">
  <tbody>
    <tr>
      <th>Date</th>
      <th>Editor</th>
      <th>Description</th>
    </tr>
    <tr>
      <td>2012-08-10</td>
      <td>ssnydman</td>
      <td>Release 1.0</td>
    </tr>
    <tr>
      <td>2012-07-13</td>
      <td>rsanderson</td>
      <td>incorporates responses
to RFC feedback</td>
    </tr>
    <tr>
      <td>2012-03-09</td>
      <td>ssnydman</td>
      <td>Initial release</td>
    </tr>
    <tr>
      <td>2012-04-13</td>
      <td>ssnydman</td>
      <td>0.2 after internal
review and IIIF April Meeting </td>
    </tr>
    <tr>
      <td>2012-05-02</td>
      <td>ssnydman</td>
      <td>RFC version</td>
    </tr>
  </tbody>
</table>
</div>

</section>
